services:
  # Servicio MinIO (almacenamiento S3-compatible)
  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"  # API S3
      - "9001:9001"  # Consola web
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: password
    volumes:
      - ./config/minio:/data  # Persistencia de datos
    command: server /data --console-address ":9001"
    networks:
      - shared-network

  # Spark Master Node
  spark-master:
    build:
      context: .
      dockerfile: Dockerfile-spark
    container_name: spark-master
    ports:
      - "7077:7077"  # Puerto maestro de Spark
      - "8081:8080"  # UI de Spark
    environment:
      - SPARK_MODE=master
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - SPARK_WORKER_MEMORY=2g
      - SPARK_DRIVER_MEMORY=1g
      - SPARK_EXECUTOR_MEMORY=2g
      - MINIO_ENDPOINT=http://minio:9000
    entrypoint: ["/bin/bash", "/opt/bitnami/scripts/spark/entrypoint-spark.sh", "master"]
    volumes:
      - spark_work:/opt/bitnami/spark/work  # Volumen compartido
      - ./scripts:/opt/airflow/scripts
    networks:
      - shared-network

  # Spark Worker Node
  spark-worker:
    build:
      context: .
      dockerfile: Dockerfile-spark
    container_name: spark-worker
    user: "root"
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - SPARK_WORKER_MEMORY=2g
      - MINIO_ENDPOINT=http://minio:9000
    entrypoint: ["/bin/bash", "/opt/bitnami/scripts/spark/entrypoint-spark.sh", "worker"]
    volumes:
      - spark_work:/opt/bitnami/spark/work
      - ./scripts:/opt/airflow/scripts
    networks:
      - shared-network

  # Base de datos PostgreSQL para Airflow
  postgres:
    image: postgres:13
    container_name: airflow-db
    restart: always
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - airflow_postgres:/var/lib/postgresql/data
    networks:
      - shared-network

  # Airflow Webserver
  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile-airflow
    container_name: airflow-webserver
    restart: always
    ports:
      - "8082:8082"
    environment:
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW_HOME=/opt/airflow
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AIRFLOW__WEBSERVER__WEB_SERVER_PORT=8082
      - MINIO_ENDPOINT=http://minio:9000
    entrypoint: ["/bin/bash", "/opt/airflow/entrypoint.sh", "webserver"]
    volumes:
      - ./dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
      - airflow_data:/opt/airflow
      - ./scripts:/opt/airflow/scripts
    networks:
      - shared-network

  # Airflow Scheduler
  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile-airflow
    container_name: airflow-scheduler
    restart: always
    environment:
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW_HOME=/opt/airflow
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - MINIO_ENDPOINT=http://minio:9000
    entrypoint: ["/bin/bash", "/opt/airflow/entrypoint.sh", "scheduler"]
    volumes:
      - ./dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
      - airflow_data:/opt/airflow
      - ./scripts:/opt/airflow/scripts
    depends_on:
      - spark-master
      - postgres
    networks:
      - shared-network

  # Hive Metastore
  hive-metastore:
    image: starburstdata/hive:3.1.2-e.18
    container_name: hive-metastore
    ports:
      - "9083:9083"
    environment:
      HIVE_METASTORE_JDBC_URL: jdbc:postgresql://postgres:5432/metastore
      HIVE_METASTORE_USER: airflow
      HIVE_METASTORE_PASSWORD: airflow
      HIVE_METASTORE_WAREHOUSE_DIR: s3://hudi-tables/
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: admin
      S3_SECRET_KEY: password
    depends_on:
      - postgres
      - minio
    networks:
      - shared-network

  # Trino Query Engine
  trino-coordinator:
    build:
      context: .
      dockerfile: Dockerfile.trino
    container_name: trino-coordinator
    ports:
      - "8083:8080"
    environment:
      - TRINO_HIVE_METASTORE_URI=thrift://hive-metastore:9083
    volumes:
      - ./trino/etc:/etc/trino
      - trino_data:/var/trino
    networks:
      - shared-network
    depends_on:
      - hive-metastore
      - minio

networks:
  shared-network:
    driver: bridge

volumes:
  airflow_data:
  airflow_logs:
  airflow_postgres:
  spark_work:
  trino_data:
